name: Azure data preperation, training and deployment

on:
  workflow_dispatch:
    inputs:
      create_compute:
        description: 'Create compute'
        required: false
        type: boolean
        default: true
      train_model:
        description: 'Train model'
        required: false
        type: boolean
        default: true
      skip_training_pipeline:
        description: 'Skip training pipeline'
        required: false
        type: boolean
        default: false
      deploy_model:
        description: 'Deploy model'
        required: false
        type: boolean
        default: true

env:
  GROUP: MLops
  WORKSPACE: ornelis-niels-ml
  LOCATION: westeurope
  CREATE_COMPUTE: ${{ github.event.inputs.create_compute }}
  TRAIN_MODEL: ${{ github.event.inputs.train_model }}
  SKIP_TRAINING_PIPELINE: ${{ github.event.inputs.skip_training_pipeline }}
  DEPLOY_MODEL: ${{ github.event.inputs.deploy_model }}

jobs:

  check-and-create-environments:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4

      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Check if AML Workspace exists'
        id: check-aml-workspace
        run: |
          az extension add --name ml -y
          az configure --defaults group=$GROUP workspace=$WORKSPACE location=$LOCATION
          WORKSPACE_EXISTS=$(az ml workspace show --query 'id' -o tsv)
          echo "Workspace exists: $WORKSPACE_EXISTS"
          if [ -z "$WORKSPACE_EXISTS" ]; then
            echo "Creating Azure ML workspace..."
          fi

      - name: 'Check and Create Environments'
        uses: azure/CLI@v1
        if: ${{ steps.check-aml-workspace.outcome == 'success' }}
        with:
          azcliversion: 2.53.0
          inlineScript: |
            check_and_create_environment() {
              ENV_NAME=$1
              ENV_FILE=$2

              if ! az ml environment show --name $ENV_NAME --query "name" -o tsv; then
                echo "Creating Azure ML environment: $ENV_NAME"

              else
                echo "Azure ML environment $ENV_NAME already exists."
              fi
            }

            check_and_create_environment "aml-Pillow" "./environments/pillow.yaml"
            check_and_create_environment "aml-Tensorflow" "./environments/tensorflow.yaml"

  azure-pipeline:
    needs: check-and-create-environments
    if: ${{ inputs.skip_training_pipeline != 'false' }}
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4

      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: 'Create compute'
        uses: azure/CLI@v1
        id: azure-ml-compute
        if: ${{ inputs.create_compute }}
        with:
          azcliversion: 2.53.0
          inlineScript: |
            az extension add --name ml -y
            az configure --defaults group=$GROUP workspace=$WORKSPACE location=$LOCATION
            az ml compute create --file ./environments/compute.yaml

      - name: 'Start compute'
        uses: azure/CLI@v1
        id: azure-ml-compute-start
        if: ${{ steps.azure-ml-compute.outcome == 'skipped' }}
        with:
          azcliversion: 2.53.0
          inlineScript: |
            az extension add --name ml -y
            az configure --defaults group=$GROUP workspace=$WORKSPACE location=$LOCATION
            az ml compute start --name cli-MLops-compute
        continue-on-error: true
      
      - name: 'Run pipeline'
        uses: azure/CLI@v1
        id: azure-ml-pipeline
        if: ${{ inputs.train_model }}
        with:
          azcliversion: 2.53.0
          inlineScript: |
            az extension add --name ml -y
            az configure --defaults group=$GROUP workspace=$WORKSPACE location=$LOCATION
            az ml job create --file ./pipelines/food-classification.yaml --set name=food-classification-${{ github.sha }}-${{ github.run_id }} --stream
            echo "Pipeline Done"
            VERSION=$( az ml model list -n food-classification --query '[0].version' )
            echo "Latest version of model is: $VERSION"
            echo "::set-output name=latest_version::$VERSION"

      - name: 'Cleanup Azure stop compute'
        uses: azure/CLI@v1
        id: azure-ml-compute-stop
        if: always()
        with:
          azcliversion: 2.53.0
          inlineScript: |
            az extension add --name ml -y
            az configure --defaults group=$GROUP workspace=$WORKSPACE location=$LOCATION
            az ml compute stop --name cli-MLops-compute
        continue-on-error: true
  download:
    runs-on: ubuntu-latest
    needs: azure-pipeline
    if: ${{ needs.azure-pipeline.result == 'success' }} || ${{ needs.azure-pipeline.result == 'skipped' }} 
    steps:

      - name: 'Checkout repository'
        uses: actions/checkout@v4

      - name: 'AZ CLI login'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Download model'
        uses: azure/CLI@v1
        with:
          azcliversion: 2.53.0
          inlineScript: |
            az extension add --name ml -y
            az configure --defaults group=$GROUP workspace=$WORKSPACE location=$LOCATION
            VERSION=$(az ml model list -n food-classification --query '[0].version')
            version=$(echo $VERSION | tr -d '"')
            echo "Latest version of model is: $version"
            echo "::set-output name=latest_version::$version"
            az ml model download --name food-classification --download-path ./inference --version $version
      
      - name: 'Upload api code'
        uses: actions/upload-artifact@v2
        with:
          name: docker-config
          path: inference
      
  deploy:
    runs-on: ubuntu-latest
    needs: download
    if:  ${{ ( needs.download.result == 'success'  ||  needs.download.result == 'skipped'  ) &&  inputs.deploy_model  }} 
    steps:
      - name: 'AZ CLI login'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: 'Gather Docker Meta Information'
        id: docker-metadata
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/ornelisniels/mlops-food-api
          tags: |
            type=ref,event=branch
            type=sha

      # Enter your GITHUB Token here!
      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ornelisniels
          password: ${{ secrets.TOKEN_GITHUB }}

      # Download artifacts
      - name: Download API code for Docker
        uses: actions/download-artifact@v2
        with:
          name: docker-config
          path: inference

      - name: 'Debug: List files in ./inference'
        run: ls ./inference

      - name: Docker Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./inference
          push: true
          tags: ${{ steps.docker-metadata.outputs.tags }}
